I am using circulant matrix [1, L, 0, ..., 0, R] for solving this problem.
In each step of the algorithm, denoted by s out of the total s_times steps, a linear operation is performed on each element enc[i] of the vector.
This operation can be expressed as:
enc[i] = 1 * enc[i-1] + l * enc[i-1-1] + r * enc[i+1-1]

This operation can be equivalently represented as a matrix multiplication, where the matrix circulant_matrix is a circulant matrix of size n.
The elements of circulant_matrix are set as follows:
circulant_matrix[0] = 1, circulant_matrix[1] = l, and circulant_matrix[n-1] = r.

By applying this linear operation s_times times, we can compute the final result by calculating (circulant_matrix^s_times) * enc, where ^ represents matrix exponentiation.
To efficiently calculate circulant_matrix^s_times, the code employs the fast exponentiation algorithm as we learnt in class.
This algorithm utilizes the binary representation of s_times to minimize the number of multiplications required.
Additionally, both matrix multiplication and exponentiation operations are performed modulo m to handle large numbers.

Overall, the complexity of the algorithm implemented is O(n^2 * log(s_times)).

